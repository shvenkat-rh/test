name: AI Issue Analysis

on:
  issues:
    types: [opened]

jobs:
  analyze-issue:
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js for repomix
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup Python for AI analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install repomix
        run: |
          npm install -g repomix
          echo "Repomix installed successfully"
          repomix --version
      
      - name: Generate repomix output for ansible-creator
        run: |
          echo "Running repomix on ansible-creator repository using remote..."
          repomix --remote https://github.com/ansible/ansible-creator --output repomix-output.txt
          echo "Repomix output generated successfully"
          ls -la repomix-output.txt
      
      - name: Clone AI-Issue-Triage repository
        uses: actions/checkout@v4
        with:
          repository: shvenkat-rh/AI-Issue-Triage
          ref: updated-genai-package
          path: ai-triage
          fetch-depth: 1
      
      - name: Install Python dependencies for AI triage
        run: |
          cd ai-triage
          pip install -r requirements.txt
          echo "Python dependencies installed successfully"
      
      - name: Prepare issue content
        id: issue-content
        run: |
          # Extract issue title and body safely
          echo "Issue content prepared"
      
      - name: Run AI issue analysis
        id: analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_DESCRIPTION: ${{ github.event.issue.body }}
        run: |
          cd ai-triage
          
          # Copy the repomix output to the AI triage directory
          cp ../repomix-output.txt .
          
          # Run the CLI analysis using environment variables
          echo "Running AI analysis..."
          python cli.py \
            --title "$ISSUE_TITLE" \
            --description "$ISSUE_DESCRIPTION" \
            --format json \
            --output analysis_result.json \
            --quiet
          
          echo "Analysis completed successfully"
          
          # Also generate a text format for the comment
          python cli.py \
            --title "$ISSUE_TITLE" \
            --description "$ISSUE_DESCRIPTION" \
            --format text \
            --output analysis_result.txt \
            --quiet
          
          echo "Text analysis generated"
      
      - name: Parse Analysis Results
        id: parse
        run: |
          cd ai-triage
          
          # Extract key information from the analysis
          ISSUE_TYPE=$(jq -r '.issue_type' analysis_result.json)
          SEVERITY=$(jq -r '.severity' analysis_result.json)
          CONFIDENCE=$(jq -r '.confidence_score' analysis_result.json)
          SUMMARY=$(jq -r '.analysis_summary' analysis_result.json)
          
          echo "issue_type=$ISSUE_TYPE" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          echo "confidence=$CONFIDENCE" >> $GITHUB_OUTPUT
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post analysis as issue comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the analysis result
            let analysisText;
            try {
              analysisText = fs.readFileSync('ai-triage/analysis_result.txt', 'utf8');
            } catch (error) {
              console.error('Error reading analysis file:', error);
              analysisText = 'Failed to read analysis results.';
            }
            
            // Use plain text analysis result without formatting
            const comment = analysisText;
            
            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('Analysis comment posted successfully');
      
      - name: Add Labels Based on Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issueType = '${{ steps.parse.outputs.issue_type }}';
            const severity = '${{ steps.parse.outputs.severity }}';
            
            const labels = [];
            
            // Add analysis label
            labels.push('gemini-analyzed');
            
            // Add type label if available
            if (issueType && issueType !== 'null' && issueType !== '') {
              labels.push(`type:${issueType.toLowerCase()}`);
            }
            
            // Add severity label if available
            if (severity && severity !== 'null' && severity !== '') {
              labels.push(`severity:${severity.toLowerCase()}`);
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: issue-analysis-${{ github.event.issue.number }}
          path: |
            ai-triage/analysis_result.json
            ai-triage/analysis_result.txt
            repomix-output.txt
          retention-days: 30

